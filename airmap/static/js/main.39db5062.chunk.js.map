{"version":3,"sources":["images/loading.gif","components/AirMap.js","components/CountrySelector.js","components/ValueInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AirMap","state","zoom","Map","center","this","props","position","TileLayer","attribution","url","measurements","map","measurement","key","markerPosition","Marker","Popup","React","Component","CountrySelector","value","handleChange","bind","event","setState","target","handleCountryChange","name","id","onChange","countries","country","countryName","countryCode","ValueInput","handleValueChange","defaultValue","htmlFor","charAt","toUpperCase","slice","type","App","lat","lng","loading","from","to","handleFromChange","handleToChange","handleSubmit","console","log","fetch","then","response","json","data","e","preventDefault","fetchMeasurements","Fragment","onClick","src","loadingGif","alt","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.39db5062.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.61c188cc.gif\";","import React from 'react';\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\r\n\r\nexport class AirMap extends React.Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         zoom: 5,\r\n      }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <Map center={this.props.position} zoom={this.state.zoom}>\r\n            <TileLayer\r\n               attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            {this.props.measurements.map((measurement, key) => { // Maps the measurements to corresponding markers and popups\r\n               if (!measurement[\"coordinates\"][\"longitude\"] || !measurement[\"coordinates\"][\"latitude\"]) { // Checks if the latitude or longitude are null or undefined\r\n                  return null;\r\n               }\r\n               const markerPosition = [measurement[\"coordinates\"][\"latitude\"], measurement[\"coordinates\"][\"longitude\"]];\r\n               return (\r\n                  <Marker key={key} position={markerPosition}>\r\n                     <Popup key={key}>\r\n                        <b>Location</b> : {measurement[\"city\"]} <br />\r\n                        <b>Date</b> : {measurement[\"date\"][\"local\"]} <br />\r\n                        <b>Value</b> : {measurement[\"value\"]} {measurement[\"unit\"]}\r\n                     </Popup>\r\n                  </Marker>\r\n               );\r\n            })}\r\n         </Map>\r\n      )\r\n   }\r\n}","import React from 'react';\r\nimport '../App.css';\r\n\r\nexport class CountrySelector extends React.Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         value: \"FR\",\r\n      }\r\n\r\n      this.handleChange = this.handleChange.bind(this);\r\n   }\r\n\r\n   handleChange(event) { // Moves state up\r\n      this.setState({ value: event.target.value });\r\n      this.props.handleCountryChange(event.target.value);\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <select name=\"countries\" id=\"countries\" onChange={this.handleChange} value={this.state.value}>\r\n               {this.props.countries.map((country, key) => {\r\n                  const countryName = country[\"name\"];\r\n                  const countryCode = country[\"code\"];\r\n                  return (\r\n                     <option\r\n                        key={key}\r\n                        value={countryCode}\r\n                     >\r\n                        {countryName ? countryName : countryCode}\r\n                     </option> // If there is no \"name\" value then the country code shall be used\r\n                  );\r\n               })}\r\n            </select>\r\n         </div>\r\n      )\r\n   }\r\n}","import React from 'react';\r\nimport '../App.css';\r\n\r\nexport class ValueInput extends React.Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         value: 0,\r\n      };\r\n      this.handleChange = this.handleChange.bind(this);\r\n   }\r\n\r\n   handleChange(event) { // Moves state up\r\n      this.setState({\r\n         value: event.target.value,\r\n      });\r\n      this.props.handleValueChange(event.target.value);\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.setState({ value: this.props.defaultValue });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <label htmlFor={this.props.name}>\r\n               {this.props.name.charAt(0).toUpperCase() + this.props.name.slice(1)}\r\n               <input type=\"number\" name={this.props.name} value={this.state.value} onChange={this.handleChange} />\r\n            </label>\r\n         </div>\r\n      )\r\n   }\r\n}","import React from 'react';\nimport './App.css';\nimport { AirMap } from './components/AirMap';\nimport { CountrySelector } from './components/CountrySelector';\nimport { ValueInput } from './components/ValueInput';\nimport loadingGif from './images/loading.gif'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      lat: 0,\n      lng: 0,\n      measurements: {},\n      countries: [],\n      loading: false,\n    }\n    this.from = 0;\n    this.to = 100;\n    this.countryCode = \"FR\";\n\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n    this.handleFromChange = this.handleFromChange.bind(this);\n    this.handleToChange = this.handleToChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Calls the /measurements endpoint with a country code as the argument\n  fetchMeasurements(countryCode, from, to) {\n    const url = 'https://api.openaq.org/v1/measurements?country=' + countryCode + \"&value_from=\" + from + \"&value_to=\" + to;\n    console.log(url);\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ \n        measurements: data[\"results\"],\n        lat: data[\"results\"][0] ? data[\"results\"][0][\"coordinates\"][\"latitude\"] : 0,\n        lng: data[\"results\"][0] ? data[\"results\"][0][\"coordinates\"][\"longitude\"] : 0,\n      }))\n      .then(() => {\n        this.setState({loading: false})\n      });\n      \n  }\n\n  handleCountryChange(countryCode) {\n    this.countryCode = countryCode;\n  }\n\n  handleFromChange(from) {\n    this.from = from;\n  }\n\n  handleToChange(to) {\n    this.to = to;\n  }\n\n  // Calls the API with the values present in the state and shows the loading spinner\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({loading: true});\n    this.fetchMeasurements(this.countryCode, this.from, this.to);\n  }\n\n  componentDidMount() {\n    // Calls the /countries endpoint to get a list of countries and country codes\n    fetch('https://api.openaq.org/v1/countries')\n      .then(response => response.json())\n      .then(data => this.setState({\n        countries: data[\"results\"],\n      }));\n\n    // Measurements\n    this.fetchMeasurements(\"FR\", 0, 100);\n  }\n\n  render() {\n    const position = [this.state.lat ?? 0, this.state.lng ?? 0] // The position of the center of the map\n    var measurements = [];\n    var countries = [];\n\n    if (this.state.measurements[0]) { // Checks if the measurements array has at least one element\n      measurements = this.state.measurements;\n      \n    }\n    if (this.state.countries[0]) { // Checks if the countries array has at least one element\n      countries = this.state.countries;\n    }\n\n    return (\n      <React.Fragment>\n        <AirMap measurements={measurements} position={position}/>\n        <div id=\"filters\">\n          <CountrySelector countries={countries} handleCountryChange={this.handleCountryChange}/>\n          <ValueInput name=\"from\" defaultValue={0} handleValueChange={this.handleFromChange}/>\n          <ValueInput name=\"to\" defaultValue={100} handleValueChange={this.handleToChange}/>\n          <button onClick={this.handleSubmit}>Apply filters</button>\n          {this.state.loading ? <img src={loadingGif} alt=\"spinner gif\" height=\"50px\"></img> : ''}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}