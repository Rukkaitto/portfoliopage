{"version":3,"sources":["images/loading.gif","components/AirMap.js","components/CountrySelector.js","components/ValueInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AirMap","state","zoom","markers","this","props","measurements","map","measurement","key","markerPosition","Marker","position","Popup","Map","center","TileLayer","attribution","url","breakpoints","currentBreakpoint","desktop","React","Component","CountrySelector","value","handleChange","bind","event","setState","target","handleCountryChange","name","id","onChange","countries","country","countryName","countryCode","ValueInput","handleValueChange","defaultValue","htmlFor","charAt","toUpperCase","slice","type","App","lat","lng","loading","from","to","handleFromChange","handleToChange","handleSubmit","fetch","then","response","json","data","e","preventDefault","fetchMeasurements","Fragment","onClick","src","loadingGif","alt","height","Boolean","window","location","hostname","match","ReactDOM","render","mobile","mobileLandscape","tablet","tabletLandscape","desktopLarge","desktopWide","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b941fa6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.61c188cc.gif\";","import React from \"react\";\r\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport { Media } from \"react-breakpoints\";\r\n\r\nexport class AirMap extends React.Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         zoom: 5,\r\n      };\r\n   }\r\n\r\n   render() {\r\n      const markers = (\r\n         this.props.measurements.map((measurement, key) => { // Maps the measurements to corresponding markers and popups\r\n            if (!measurement[\"coordinates\"][\"longitude\"] || !measurement[\"coordinates\"][\"latitude\"]) { // Checks if the latitude or longitude are null or undefined\r\n               return null;\r\n            }\r\n            const markerPosition = [measurement[\"coordinates\"][\"latitude\"], measurement[\"coordinates\"][\"longitude\"]];\r\n            return (\r\n               <Marker key={key} position={markerPosition}>\r\n                  <Popup key={key}>\r\n                     <b>Location</b> : {measurement[\"city\"]} <br />\r\n                     <b>Date</b> : {measurement[\"date\"][\"local\"]} <br />\r\n                     <b>Value</b> : {measurement[\"value\"]} {measurement[\"unit\"]}\r\n                  </Popup>\r\n               </Marker>\r\n            );\r\n         })\r\n      );\r\n\r\n      return (\r\n         <Map center={this.props.position} zoom={this.state.zoom}>\r\n            <TileLayer\r\n               attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Media> \r\n               {\r\n                  ({ breakpoints, currentBreakpoint }) =>\r\n                     breakpoints[currentBreakpoint] > breakpoints.desktop ? ( // Uses MarkerCluster on smaller screens to avoir cluttering\r\n                        <div> \r\n                           { markers } \r\n                        </div>\r\n                     ) : (\r\n                           <MarkerClusterGroup>\r\n                              {markers}\r\n                           </MarkerClusterGroup>\r\n                        )\r\n               }\r\n            </Media>\r\n         </Map>\r\n      )\r\n   }\r\n}","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nexport class CountrySelector extends React.Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         value: \"FR\",\r\n      };\r\n\r\n      this.handleChange = this.handleChange.bind(this);\r\n   }\r\n\r\n   handleChange(event) { // Moves state up\r\n      this.setState({ value: event.target.value });\r\n      this.props.handleCountryChange(event.target.value);\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <select name=\"countries\" id=\"countries\" onChange={this.handleChange} value={this.state.value}>\r\n               {this.props.countries.map((country, key) => {\r\n                  const countryName = country[\"name\"];\r\n                  const countryCode = country[\"code\"];\r\n                  return (\r\n                     <option\r\n                        key={key}\r\n                        value={countryCode}\r\n                     >\r\n                        {countryName ? countryName : countryCode}\r\n                     </option> // If there is no \"name\" value then the country code shall be used\r\n                  );\r\n               })}\r\n            </select>\r\n         </div>\r\n      );\r\n   }\r\n}","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nexport class ValueInput extends React.Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         value: 0,\r\n      };\r\n      this.handleChange = this.handleChange.bind(this);\r\n   }\r\n\r\n   handleChange(event) { // Moves state up\r\n      this.setState({\r\n         value: event.target.value,\r\n      });\r\n      this.props.handleValueChange(event.target.value);\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.setState({ value: this.props.defaultValue });\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <label htmlFor={this.props.name}>\r\n               {this.props.name.charAt(0).toUpperCase() + this.props.name.slice(1)}\r\n               <input type=\"number\" name={this.props.name} value={this.state.value} onChange={this.handleChange} />\r\n            </label>\r\n         </div>\r\n      );\r\n   }\r\n}","import React from \"react\";\nimport \"./App.css\";\nimport { AirMap } from \"./components/AirMap\";\nimport { CountrySelector } from \"./components/CountrySelector\";\nimport { ValueInput } from \"./components/ValueInput\";\nimport loadingGif from \"./images/loading.gif\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      lat: 0,\n      lng: 0,\n      measurements: {},\n      countries: [],\n      loading: false,\n    };\n    this.from = 0;\n    this.to = 100;\n    this.countryCode = \"FR\";\n\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n    this.handleFromChange = this.handleFromChange.bind(this);\n    this.handleToChange = this.handleToChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Calls the /measurements endpoint with a country code as the argument\n  fetchMeasurements(countryCode, from, to) {\n    const url = \"https://api.openaq.org/v1/measurements?country=\" + countryCode + \"&value_from=\" + from + \"&value_to=\" + to;\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => this.setState({ \n        measurements: data[\"results\"],\n        lat: data[\"results\"][0] ? data[\"results\"][0][\"coordinates\"][\"latitude\"] : 0,\n        lng: data[\"results\"][0] ? data[\"results\"][0][\"coordinates\"][\"longitude\"] : 0,\n      }))\n      .then(() => {\n        this.setState({loading: false});\n      });\n      \n  }\n\n  handleCountryChange(countryCode) {\n    this.countryCode = countryCode;\n  }\n\n  handleFromChange(from) {\n    this.from = from;\n  }\n\n  handleToChange(to) {\n    this.to = to;\n  }\n\n  // Calls the API with the values present in the state and shows the loading spinner\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({loading: true});\n    this.fetchMeasurements(this.countryCode, this.from, this.to);\n  }\n\n  componentDidMount() {\n    // Calls the /countries endpoint to get a list of countries and country codes\n    fetch(\"https://api.openaq.org/v1/countries\")\n      .then((response) => response.json())\n      .then((data) => this.setState({\n        countries: data[\"results\"],\n      }));\n\n    // Measurements\n    this.fetchMeasurements(\"FR\", 0, 100);\n  }\n\n  render() {\n    const position = [this.state.lat ?? 0, this.state.lng ?? 0]; // The position of the center of the map\n    var measurements = [];\n    var countries = [];\n\n    if (this.state.measurements[0]) { // Checks if the measurements array has at least one element\n      measurements = this.state.measurements;\n      \n    }\n    if (this.state.countries[0]) { // Checks if the countries array has at least one element\n      countries = this.state.countries;\n    }\n\n    return (\n      <React.Fragment>\n        <AirMap measurements={measurements} position={position}/>\n        <div id=\"filters\">\n          <CountrySelector countries={countries} handleCountryChange={this.handleCountryChange}/>\n          <ValueInput name=\"from\" defaultValue={0} handleValueChange={this.handleFromChange}/>\n          <ValueInput name=\"to\" defaultValue={100} handleValueChange={this.handleToChange}/>\n          <button onClick={this.handleSubmit}>Apply filters</button>\n          {this.state.loading ? <img src={loadingGif} alt=\"spinner gif\" height=\"50px\"></img> : \"\"}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ReactBreakpoints from \"react-breakpoints\";\n\nconst breakpoints = {\n    mobile: 320,\n    mobileLandscape: 480,\n    tablet: 768,\n    tabletLandscape: 1024,\n    desktop: 1200,\n    desktopLarge: 1500,\n    desktopWide: 1920,\n};\n\nReactDOM.render(\n    <ReactBreakpoints breakpoints={breakpoints}>\n        <App />\n    </ReactBreakpoints>, \ndocument.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}